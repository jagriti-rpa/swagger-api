swagger: '2.0'

info:
  contact: {}
paths:
  /album/{product_id}:
    get:
      description: Get album with the specified product ID, optionally filtering by fields
      produces:
        - application/json
      tags:
        - Content_Service_API
      summary: Get album by product ID
      parameters:
        - type: string
          description: Product ID of the album to retrieve
          name: product_id
          in: path
          required: true
        - type: string
          description: Comma-separated list of fields to return (e.g., 'image_url')
          name: field
          in: query
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties: true
  /albums:
    get:
      description: Get all albums as a JSON array
      produces:
        - application/json
      tags:
        - Content_Service_API
      summary: Get all albums
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/domain.Album'
    post:
      description: Get all albums as JSON
      produces:
        - application/json
      tags:
        - Content_Service_API
      summary: Get all albums
      operationId: post-savealbums
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/domain.Album'
  /albums_update/{product_id}:
    put:
      description: Update an existing album with the provided JSON body
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Content_Service_API
      summary: Update an existing album
      parameters:
        - type: string
          description: Product ID of the album to update
          name: product_id
          in: path
          required: true
        - description: Album object with updated data
          name: album
          in: body
          required: true
          schema:
            $ref: '#/definitions/domain.Album'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/domain.Album'
  /usermysql:
    get:
      description: Get all users and save them to MongoDB, then publish to RabbitMQ
      tags:
        - Content_Service_API
      summary: Get all users
      responses:
        '200':
          description: OK
definitions:
  domain.Album:
    type: object
    properties:
      image_url:
        type: string
      meta:
        $ref: '#/definitions/domain.Meta'
      product_id:
        type: string
  domain.DerivedDict:
    type: object
    properties:
      blue:
        type: string
      duplicate:
        type: string
      exif_dict:
        type: string
      fourier_transform_blur:
        type: string
      gradient_magnitude_blur:
        type: string
      green:
        type: string
      image_metric:
        type: string
      laplacian_variance_blur:
        type: string
      megapixels:
        type: string
      ppi:
        type: string
      red:
        type: string
  domain.Meta:
    type: object
    properties:
      derived:
        $ref: '#/definitions/domain.DerivedDict'
      parent:
        $ref: '#/definitions/domain.ParentDict'
  domain.ParentDict:
    type: object
    properties:
      author:
        type: string
      copyright:
        type: string
      description:
        type: string
      height:
        type: string
      image_format:
        type: string
      image_mode:
        type: string
      image_name:
        type: string
      image_shape:
        type: string
      keywords:
        type: string
      location:
        type: string
      size:
        type: string
      width:
        type: string
